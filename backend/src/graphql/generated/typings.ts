/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Bet: { // root type
    betType?: string | null; // String
    currency?: string | null; // String
    id?: string | null; // String
    odds?: number | null; // Float
    spreadValue?: number | null; // Float
    totalType?: string | null; // String
    userId?: string | null; // String
    wagerAmount?: number | null; // Float
  }
  Match: { // root type
    date?: string | null; // String
    id?: string | null; // String
  }
  Mutation: {};
  Odds: { // root type
    id?: string | null; // String
    matchId?: string | null; // String
    moneyline?: number | null; // Float
    spread?: number | null; // Float
    spreadOdds?: number | null; // Float
    teamId?: string | null; // String
    total?: number | null; // Float
    totalOverOdds?: number | null; // Float
    totalUnderOdds?: number | null; // Float
  }
  Query: {};
  Team: { // root type
    id?: string | null; // String
    image?: string | null; // String
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Bet: { // field return type
    betType: string | null; // String
    currency: string | null; // String
    id: string | null; // String
    match: NexusGenRootTypes['Match'] | null; // Match
    odds: number | null; // Float
    spreadValue: number | null; // Float
    team: NexusGenRootTypes['Team'] | null; // Team
    totalType: string | null; // String
    userId: string | null; // String
    wagerAmount: number | null; // Float
  }
  Match: { // field return type
    date: string | null; // String
    id: string | null; // String
    oddsA: NexusGenRootTypes['Odds'] | null; // Odds
    oddsB: NexusGenRootTypes['Odds'] | null; // Odds
    teamA: NexusGenRootTypes['Team'] | null; // Team
    teamB: NexusGenRootTypes['Team'] | null; // Team
  }
  Mutation: { // field return type
    placeBet: NexusGenRootTypes['Bet'] | null; // Bet
  }
  Odds: { // field return type
    id: string | null; // String
    matchId: string | null; // String
    moneyline: number | null; // Float
    spread: number | null; // Float
    spreadOdds: number | null; // Float
    teamId: string | null; // String
    total: number | null; // Float
    totalOverOdds: number | null; // Float
    totalUnderOdds: number | null; // Float
  }
  Query: { // field return type
    getMatches: Array<NexusGenRootTypes['Match'] | null> | null; // [Match]
    getUserBets: Array<NexusGenRootTypes['Bet'] | null> | null; // [Bet]
  }
  Team: { // field return type
    id: string | null; // String
    image: string | null; // String
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Bet: { // field return type name
    betType: 'String'
    currency: 'String'
    id: 'String'
    match: 'Match'
    odds: 'Float'
    spreadValue: 'Float'
    team: 'Team'
    totalType: 'String'
    userId: 'String'
    wagerAmount: 'Float'
  }
  Match: { // field return type name
    date: 'String'
    id: 'String'
    oddsA: 'Odds'
    oddsB: 'Odds'
    teamA: 'Team'
    teamB: 'Team'
  }
  Mutation: { // field return type name
    placeBet: 'Bet'
  }
  Odds: { // field return type name
    id: 'String'
    matchId: 'String'
    moneyline: 'Float'
    spread: 'Float'
    spreadOdds: 'Float'
    teamId: 'String'
    total: 'Float'
    totalOverOdds: 'Float'
    totalUnderOdds: 'Float'
  }
  Query: { // field return type name
    getMatches: 'Match'
    getUserBets: 'Bet'
  }
  Team: { // field return type name
    id: 'String'
    image: 'String'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    placeBet: { // args
      betType?: string | null; // String
      currency?: string | null; // String
      matchId?: string | null; // String
      odds?: number | null; // Float
      spreadValue?: number | null; // Float
      teamId?: string | null; // String
      totalType?: string | null; // String
      userId?: string | null; // String
      wagerAmount?: number | null; // Float
    }
  }
  Query: {
    getUserBets: { // args
      userId?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}